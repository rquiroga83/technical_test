{"version":3,"sources":["components/TableFetch/index.js","App.js","serviceWorker.js","index.js"],"names":["wellStyles","maxWidth","margin","TableFetch","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","activos","_this2","fetch","then","response","json","data","setState","activosFijos","catch","err","console","log","getActivos","_this3","table_content","react_default","a","createElement","length","map","activos_row","id","key","nombre","numeroInternoInventario","serial","tipoId","fechaBaja","fechaCompra","className","style","Button","bsStyle","bsSize","block","onClick","Table","hover","Component","App","Navbar","fluid","Header","Brand","components_TableFetch","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAIMA,EAAa,CAAEC,SAAU,IAAKC,OAAQ,eAiF7BC,cA7EX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAGKI,MAAQ,CACTC,QAAS,IALHR,4EAUD,IAAAS,EAAAN,KACTO,MAAK,0EACAC,KAAK,SAACC,GACH,OAAOA,EAASC,SAEnBF,KAAK,SAACG,GACHL,EAAKM,SAAS,CAAEP,QAASM,EAAKE,iBAEjCC,MAAM,SAACC,GACJC,QAAQC,IAAI,sBAAuBF,iDAM3Cf,KAAKkB,8CAGA,IAAAC,EAAAnB,KAEDoB,EAAgBC,EAAAC,EAAAC,cAAA,WAiBpB,OAhBIvB,KAAKI,MAAMC,QAAQmB,OAAS,IAC5BJ,EAAgBpB,KAAKI,MAAMC,QAAQoB,IAAI,SAACC,EAAaC,GACjD,OACIN,EAAAC,EAAAC,cAAA,MAAIK,IAAKD,GACLN,EAAAC,EAAAC,cAAA,UAAMG,EAAYC,IAClBN,EAAAC,EAAAC,cAAA,UAAMG,EAAYG,QAClBR,EAAAC,EAAAC,cAAA,UAAMG,EAAYI,yBAClBT,EAAAC,EAAAC,cAAA,UAAMG,EAAYK,QAClBV,EAAAC,EAAAC,cAAA,UAAMG,EAAYM,OAAOH,QACzBR,EAAAC,EAAAC,cAAA,UAAMG,EAAYO,WAClBZ,EAAAC,EAAAC,cAAA,UAAMG,EAAYQ,iBAO9Bb,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OAAOC,MAAO3C,GACzB4B,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAQC,QAAQ,UAAUC,OAAO,QAAQC,OAAK,EAACC,QAAS,WAAKtB,EAAKD,eAAlE,eAIJG,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,OAAK,GACRtB,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,4BAGRF,EAAAC,EAAAC,cAAA,aACKH,YArEAwB,aCoBVC,mLAnBX,OACExB,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OACbd,EAAAC,EAAAC,cAAA,UAAQY,UAAU,cAChBd,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAQC,OAAK,GACX1B,EAAAC,EAAAC,cAACuB,EAAA,EAAOE,OAAR,KACE3B,EAAAC,EAAAC,cAACuB,EAAA,EAAOG,MAAR,uCAMN5B,EAAAC,EAAAC,cAAA,OAAKY,UAAU,WACbd,EAAAC,EAAAC,cAAC2B,EAAD,eAdQN,aCOEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,KAAK,SAAAwD,GACjCA,EAAaC","file":"static/js/main.6be338b9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Table, Button } from \"react-bootstrap\";\r\n\r\n\r\nconst wellStyles = { maxWidth: 400, margin: '0 auto 10px' };\r\n\r\nclass TableFetch extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        // State\r\n        this.state = {\r\n            activos: []\r\n        };\r\n    }\r\n\r\n\r\n    getActivos() {\r\n        fetch(`http://localhost:8080/asd/services/servicioActivos/obtenerActivosFijos`)\r\n            .then((response) => {\r\n                return response.json();\r\n            })\r\n            .then((data) => {\r\n                this.setState({ activos: data.activosFijos })\r\n            })\r\n            .catch((err) => {\r\n                console.log('Error Fetch Api :-S', err);\r\n            });\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.getActivos();\r\n    }\r\n\r\n    render() {\r\n\r\n        let table_content = <tr />;\r\n        if (this.state.activos.length > 0) {\r\n            table_content = this.state.activos.map((activos_row, id) => {\r\n                return (\r\n                    <tr key={id} >\r\n                        <td >{activos_row.id}</td>\r\n                        <td >{activos_row.nombre}</td>\r\n                        <td >{activos_row.numeroInternoInventario}</td>\r\n                        <td >{activos_row.serial}</td>\r\n                        <td >{activos_row.tipoId.nombre}</td>\r\n                        <td >{activos_row.fechaBaja}</td>\r\n                        <td >{activos_row.fechaCompra}</td>\r\n                    </tr>\r\n                );\r\n            });\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"well\" style={wellStyles}>\r\n                    <Button bsStyle=\"primary\" bsSize=\"large\" block onClick={()=>{this.getActivos()}}>\r\n                        Actualizar\r\n                    </Button>\r\n                </div>\r\n                <Table hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>NOMBRE</th>\r\n                            <th>NUMERO INVENTARIO</th>\r\n                            <th>SERIAL</th>\r\n                            <th>TIPO</th>\r\n                            <th>FECHA BAJA</th>\r\n                            <th>FECHA COMPRA</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {table_content}\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default TableFetch;","import React, { Component } from 'react';\nimport { Navbar } from \"react-bootstrap\";\nimport './App.css';\nimport TableFetch from \"./components/TableFetch\"\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"app-header\">\n          <Navbar fluid>\n            <Navbar.Header>\n              <Navbar.Brand>\n                Cliente Rest Prueba Tecnica\n              </Navbar.Brand>\n            </Navbar.Header>\n          </Navbar>\n        </header>\n        <div className=\"content\">\n          <TableFetch/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}